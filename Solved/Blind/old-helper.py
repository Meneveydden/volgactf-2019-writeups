from base64 import b64encode
import shlex

multiple = 24
n = 26507591511689883990023896389022361811173033984051016489514421457013639621509962613332324662222154683066173937658495362448733162728817642341239457485221865493926211958117034923747221236176204216845182311004742474549095130306550623190917480615151093941494688906907516349433681015204941620716162038586590895058816430264415335805881575305773073358135217732591500750773744464142282514963376379623449776844046465746330691788777566563856886778143019387464133144867446731438967247646981498812182658347753229511846953659235528803754112114516623201792727787856347729085966824435377279429992530935232902223909659507613583396967
e = 65537

def to_hex(i):
    i_hex = hex(i)[2:]
    if len(i_hex) % 2 == 1:
        i_hex = '0' + i_hex
    return i_hex

def part1(cmd_exp="cat flag"):
    Cx = int(cmd_exp.encode().hex(), 16)
    
    Ca = pow(multiple, e, n)
    Cb = (Ca * Cx) % n

    Cb_hex = to_hex(Cb)
    Cb = bytes.fromhex(Cb_hex)
    print("Cb:", Cb)

    cmd_l = shlex.split(Cb.decode('ascii', errors='ignore'))
    print("split:", cmd_l)

    if (b'\r' in Cb) or (b'\n' in Cb) or (b'\t' in Cb) or (b' ' in Cb):
        print('newline error')
        raise Exception('newline in payload')

    print()
    print('part 1:', b64encode(Cb).decode())
    return (Cb, b64encode(Cb).decode())



s = 2417842751471465187156980253300618234834144063486519106866225782499535555346096203965220533240780815827197306584157720530283074223843028735557690855119411854945317105643511742833099619337166846476692094342267615055518352798087714145456505431500975630492573736968444540188122147694810559750672264535393319559041830507302303904270709659281408049910019547136559721443218618017892579333351148223696031726776460057099982349715044670108117368728505231900273535992572462677468482177036160226549278340212217578532366126363041512679290671176749189456118128649723156437665087404459748095477890744276193968834849724407090719623
def part2(sgn=s):
    Cb = pow(sgn, e, n)
    Cb_text = bytes.fromhex(to_hex(Cb))
    print("Cb:", Cb_text)

    signature = sgn // 10
    verify = pow(signature, e, n)
    verify_text = bytes.fromhex(to_hex(verify))
    print("verify:", verify_text)


if __name__ == '__main__1':
    while True:
        multiple += 1
        print("MULTIPLE", multiple)
        try:
            part1()
            print("Success", multiple)
            break
        except:
            continue

if __name__ == '__main__':
    part2()
